#!/bin/bash

####################################
# Author: Tony Castronova
# Email:  acastronova.cuahsi.org
# Date:   9.17.2017
# Org:    CUAHSI
# Desc:   Utility for running SUMMA in a docker container
####################################

# example
# ./run-summa -b summaTestCases -m summaTestCases/settings/syntheticTestCases/celia1990/summa_fileManager_celia1990.txt -o summaTestCases/output/syntheticTestCases/celia1990/

# beautify the errors
RED='\033[0;31m'
NC='\033[0m' # No Color
BASEDIR=/tmp/summa

build-docker-img() {
  if !  [[ "$1" == n ]]; then
    docker build -t summa .
  else
    echo -e "${RED}--> Exiting Immediately${NC}"
    echo -e "${RED}--> Come back when you're serious about Hydrology! :-p${NC}"
    exit -1;
  fi
}

check-docker() {

  if  [[ "$(docker images -q summa 2> /dev/null)" == "" ]]; then
     echo -e "${RED}--> [Error] The SUMMA image does not exist${NC}"
     read -p "I need to build the SUMMA docker image, do you want to continue [Y/n]? " response
     build-docker-img $response
  fi

}

parse-path() {
  if [[ "$1" = /* ]]; then
      echo "$1"
  else
      echo "$(pwd)/$1"
  fi
}


run() {


    # check that the docker image exists
    check-docker

    # parse the path (abs or rel)
    DIRECTORY=$(parse-path $DIRECTORY)
#    ABSMASTERFILE=$(parse-path $MASTERFILE)
#    ABSOUTDIR=$(parse-path $OUTPUT)

    echo $DIRECTORY:$BASEDIR
#    echo $ABSMASTERFILE
#    echo $ABSOUTDIR
    echo $OUTPUT
    echo $MASTERFILE


    # run docker
#    docker run -ti --rm -v $DIRECTORY:$BASEDIR -e LOCALBASEDIR=$DIRECTORY -e OUTDIR=$ABSOUTDIR -e MASTERPATH=$ABSMASTERFILE summa
#docker run -ti --rm -v $DIRECTORY:$BASEDIR -v $(pwd)/entry.py:/code/bin/entry.py -e OUTDIR=$OUTPUT -e MASTERPATH=$MASTERFILE  --entrypoint /bin/bash summa -s

#docker run -ti --rm -v $DIRECTORY:$BASEDIR -v $(pwd)/entry.py:/code/bin/entry.py -e LOCALBASEDIR=$DIRECTORY -e OUTDIR=$ABSOUTDIR -e MASTERPATH=$MASTERFILE --entrypoint /bin/bash summa -s

    docker run --rm \
	-v $DIRECTORY:$BASEDIR \
	-e LOCALBASEDIR=$DIRECTORY \
	-e MASTERPATH=$MASTERFILE \
	summa




    # cleanup, remove the temporary exec directory
#    rm -rf $EXECDIR


}

usage() {
   echo -e "\n**********************************************************************"
   echo -e "*******************  SUMMA-Docker Control Script  ********************"
   echo -e "**********************************************************************"
   echo "* USAGE                                                              *"
   echo "*   ./run-summa                                                      *"
   echo "*       -b    # summa simulation base directory [Required].          *"
   echo "*       -m    # summa masterfile to execute  [Required]. This value  *"
   echo "*               must be relative to the simulation base dir          *"
#   echo "*       -o    # summa output directory [Required]. This value must   *"
#   echo "*               be relative to the simulation base dir               *"
   echo "*                                                                    *"
   echo "* NOTE: all input files should use the placeholder <BASEDIR> which   *"
   echo "* will be modified by this script, relative to the /tmp directory in *"
   echo "* the docker container                                               *"
   echo -e "**********************************************************************\n"
}

check-inputs() {

MISSING=0
if [ -z "$DIRECTORY" ]; then
    echo -e "${RED}--> Missing required argument DIRECTORY${NC}"
    MISSING=1
fi

#if [ -z "$OUTPUT" ]; then
#    echo -e "${RED}--> Missing required argument OUTPUT${NC}"
#    MISSING=1
#fi

if [ -z "$MASTERFILE" ]; then
    echo -e "${RED}--> Missing required argument MASTERFILE${NC}"
    MISSING=1
fi
if [ $MISSING == 1 ]; then
    usage
    exit -1
fi


}

# Read terminal arguments
while [[ $# -gt 1 ]]
do
  key="$1"

  case $key in
     -b|--base-dir)
     DIRECTORY="$2"
     shift # past argument
     ;;
#     -o|--output-dir)
#     OUTPUT="$2"
#     shift # past argument
#     ;;
     -m|--master-file)
     MASTERFILE="$2"
     shift # past argument
     ;;
     --default)
     DEFAULT=YES
     ;;
     *)
            # unknown option
     ;;
  esac
  shift # past argument or value
done

check-inputs
run


exit 0;
